syntax = "proto3";

package rout3serv;

message Empty {
}

message VersionResponse {
  string version = 1;
  string git_commit_sha = 2;
  string build_timestamp = 3;
}

/** A point in WGS84 coordinates */
message Point {
  double x = 1;
  double y = 2;
}

message ShortestPathOptions {

  /** number of destinations which should be reached for one cell. after that routing for this cell will be stopped.
      0 -> continue until all are reached
   */
  uint32 num_destinations_to_reach = 4;

  /** Number of cells to be allowed to be missing between
   a cell and the graph while the cell is still counted as being connected
   to the graph */
  uint32 num_gap_cells_to_graph = 6;
}

message DifferentialShortestPathRequest {

  /** the graph to use */
  GraphHandle graph_handle = 1;

  /** the geometry of the disturbance in WKB format

  WGS84 coordinate system
   */
  bytes disturbance_wkb_geometry = 2;

  /* The radius around the wkb_geometry to be analyzed.
      units are meters. */
  double radius_meters = 3;

  ShortestPathOptions options = 4;

  /* targets to route to */
  repeated Point destinations = 5;

  /* Setting a `downsampled_prerouting` will allow performing an initial routing at a lower resolution
  to reduce the number of routings to perform on the full-resolution graph. This has the potential
   to skew the results as a reduction in resolution may change the graph topology, but decreases the
   running time in most cases.
   */
  bool downsampled_prerouting = 6;

  /* store output on s3 */
  bool store_output = 7;

  /* dataset to use for providing population/... data */
  string ref_dataset_name = 8;
}

/** A reference to an ID string */
message IdRef {
  string object_id = 1;
}

message CellSelection {
  // h3 cells part of the selection
  repeated uint64 cells = 1;

  /* optional name of a dataset.
     when this is set the `cells` get reduced to the cells present in this dataset

   */
  string dataset_name = 2;

}

message DifferentialShortestPathRoutesRequest {
  string object_id = 1;

  /** apply a slight smoothing to any returned geometries to break sharp edges */
  bool smoothen_geometries = 2;

  repeated uint64 cells = 3;
}

message RouteWKB {
  uint64 origin_cell = 1;
  uint64 destination_cell = 2;
  double travel_duration_secs = 3;
  double edge_preference = 4;
  bytes wkb = 5;
  double path_length_m = 6;
}

message RouteH3Indexes {
  uint64 origin_cell = 1;
  uint64 destination_cell = 2;
  double travel_duration_secs = 3;
  double edge_preference = 4;

  /** h3indexes ordered from origin_cell to destination_cell */
  repeated uint64 h3indexes = 5;

  double path_length_m = 6;
}

message H3ShortestPathRequest {

  /** the graph to use */
  GraphHandle graph_handle = 1;

  CellSelection origins = 2;
  CellSelection destinations = 3;

  ShortestPathOptions options = 4;

  /** apply a slight smoothing to any returned geometries to break sharp edges */
  bool smoothen_geometries = 5;

  /** any of the configured routing modes or empty to use the default */
  string routing_mode = 6;
}

/** A single Arrow chunk in Arrow IPC File format */
message ArrowIPCChunk {
  /** id of the object this batch belongs to - if there is any */
  string object_id = 1;

  bytes data = 2;
}

message DifferentialShortestPathRoutes {
  repeated RouteWKB routes_without_disturbance = 2;
  repeated RouteWKB routes_with_disturbance = 3;
}

/** using these handles graphs can be references */
message GraphHandle {
  string name = 1;
  uint32 h3_resolution = 2;
}

message GraphInfo {
  /** using this the graph can be referenced*/
  GraphHandle handle = 1;

  /** true when the graph is currently loaded into memory */
  bool is_cached = 2;

  /** only for cached graphs */
  uint64 num_edges = 3;

  /** only for cached graphs */
  uint64 num_nodes = 4;
}

message ListGraphsResponse {
  repeated GraphInfo graphs = 1;
}

message ListDatasetsResponse {
  repeated string dataset_name = 1;
}

message H3WithinThresholdRequest {

  /** the graph to use */
  GraphHandle graph_handle = 1;

  CellSelection origins = 2;

  /** travel_duration threshold in seconds */
  float travel_duration_secs_threshold = 3;

  /** any of the configured routing modes or empty to use the default */
  string routing_mode = 4;
}

service Rout3Serv {
  // general methods -------------------------------------
  rpc Version(Empty) returns (VersionResponse) {}
  rpc ListGraphs(Empty) returns (ListGraphsResponse) {}
  rpc ListDatasets(Empty) returns (ListDatasetsResponse) {}

  /* shortest path */
  rpc H3ShortestPath(H3ShortestPathRequest) returns (stream ArrowIPCChunk);
  rpc H3ShortestPathRoutes(H3ShortestPathRequest) returns (stream RouteWKB);
  rpc H3ShortestPathCells(H3ShortestPathRequest) returns (stream RouteH3Indexes);
  rpc H3ShortestPathEdges(H3ShortestPathRequest) returns (stream RouteH3Indexes);

  /** differential shortest path based on the population dataset */
  rpc DifferentialShortestPath(DifferentialShortestPathRequest)
      returns (stream ArrowIPCChunk) {}
  rpc GetDifferentialShortestPath(IdRef)
      returns (stream ArrowIPCChunk) {}
  rpc GetDifferentialShortestPathRoutes(DifferentialShortestPathRoutesRequest)
      returns (stream DifferentialShortestPathRoutes) {}

  /** graph cells with in a certain threshold of origin cells */
  rpc H3CellsWithinThreshold(H3WithinThresholdRequest) returns (stream ArrowIPCChunk);
}

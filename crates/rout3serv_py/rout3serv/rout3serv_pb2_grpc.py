# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import rout3serv_pb2


class Rout3ServStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/rout3serv.Rout3Serv/Version',
                request_serializer=rout3serv_pb2.Empty.SerializeToString,
                response_deserializer=rout3serv_pb2.VersionResponse.FromString,
                )
        self.ListGraphs = channel.unary_unary(
                '/rout3serv.Rout3Serv/ListGraphs',
                request_serializer=rout3serv_pb2.Empty.SerializeToString,
                response_deserializer=rout3serv_pb2.ListGraphsResponse.FromString,
                )
        self.ListDatasets = channel.unary_unary(
                '/rout3serv.Rout3Serv/ListDatasets',
                request_serializer=rout3serv_pb2.Empty.SerializeToString,
                response_deserializer=rout3serv_pb2.ListDatasetsResponse.FromString,
                )
        self.H3ShortestPath = channel.unary_stream(
                '/rout3serv.Rout3Serv/H3ShortestPath',
                request_serializer=rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
                response_deserializer=rout3serv_pb2.ArrowIPCChunk.FromString,
                )
        self.H3ShortestPathRoutes = channel.unary_stream(
                '/rout3serv.Rout3Serv/H3ShortestPathRoutes',
                request_serializer=rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
                response_deserializer=rout3serv_pb2.RouteWKB.FromString,
                )
        self.H3ShortestPathCells = channel.unary_stream(
                '/rout3serv.Rout3Serv/H3ShortestPathCells',
                request_serializer=rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
                response_deserializer=rout3serv_pb2.RouteH3Indexes.FromString,
                )
        self.H3ShortestPathEdges = channel.unary_stream(
                '/rout3serv.Rout3Serv/H3ShortestPathEdges',
                request_serializer=rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
                response_deserializer=rout3serv_pb2.RouteH3Indexes.FromString,
                )
        self.DifferentialShortestPath = channel.unary_stream(
                '/rout3serv.Rout3Serv/DifferentialShortestPath',
                request_serializer=rout3serv_pb2.DifferentialShortestPathRequest.SerializeToString,
                response_deserializer=rout3serv_pb2.ArrowIPCChunk.FromString,
                )
        self.GetDifferentialShortestPath = channel.unary_stream(
                '/rout3serv.Rout3Serv/GetDifferentialShortestPath',
                request_serializer=rout3serv_pb2.IdRef.SerializeToString,
                response_deserializer=rout3serv_pb2.ArrowIPCChunk.FromString,
                )
        self.GetDifferentialShortestPathRoutes = channel.unary_stream(
                '/rout3serv.Rout3Serv/GetDifferentialShortestPathRoutes',
                request_serializer=rout3serv_pb2.DifferentialShortestPathRoutesRequest.SerializeToString,
                response_deserializer=rout3serv_pb2.DifferentialShortestPathRoutes.FromString,
                )
        self.H3CellsWithinThreshold = channel.unary_stream(
                '/rout3serv.Rout3Serv/H3CellsWithinThreshold',
                request_serializer=rout3serv_pb2.H3WithinThresholdRequest.SerializeToString,
                response_deserializer=rout3serv_pb2.ArrowIPCChunk.FromString,
                )


class Rout3ServServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Version(self, request, context):
        """general methods -------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGraphs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def H3ShortestPath(self, request, context):
        """shortest path 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def H3ShortestPathRoutes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def H3ShortestPathCells(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def H3ShortestPathEdges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DifferentialShortestPath(self, request, context):
        """* differential shortest path based on the population dataset 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDifferentialShortestPath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDifferentialShortestPathRoutes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def H3CellsWithinThreshold(self, request, context):
        """* graph cells with in a certain threshold of origin cells 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Rout3ServServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=rout3serv_pb2.Empty.FromString,
                    response_serializer=rout3serv_pb2.VersionResponse.SerializeToString,
            ),
            'ListGraphs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGraphs,
                    request_deserializer=rout3serv_pb2.Empty.FromString,
                    response_serializer=rout3serv_pb2.ListGraphsResponse.SerializeToString,
            ),
            'ListDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatasets,
                    request_deserializer=rout3serv_pb2.Empty.FromString,
                    response_serializer=rout3serv_pb2.ListDatasetsResponse.SerializeToString,
            ),
            'H3ShortestPath': grpc.unary_stream_rpc_method_handler(
                    servicer.H3ShortestPath,
                    request_deserializer=rout3serv_pb2.H3ShortestPathRequest.FromString,
                    response_serializer=rout3serv_pb2.ArrowIPCChunk.SerializeToString,
            ),
            'H3ShortestPathRoutes': grpc.unary_stream_rpc_method_handler(
                    servicer.H3ShortestPathRoutes,
                    request_deserializer=rout3serv_pb2.H3ShortestPathRequest.FromString,
                    response_serializer=rout3serv_pb2.RouteWKB.SerializeToString,
            ),
            'H3ShortestPathCells': grpc.unary_stream_rpc_method_handler(
                    servicer.H3ShortestPathCells,
                    request_deserializer=rout3serv_pb2.H3ShortestPathRequest.FromString,
                    response_serializer=rout3serv_pb2.RouteH3Indexes.SerializeToString,
            ),
            'H3ShortestPathEdges': grpc.unary_stream_rpc_method_handler(
                    servicer.H3ShortestPathEdges,
                    request_deserializer=rout3serv_pb2.H3ShortestPathRequest.FromString,
                    response_serializer=rout3serv_pb2.RouteH3Indexes.SerializeToString,
            ),
            'DifferentialShortestPath': grpc.unary_stream_rpc_method_handler(
                    servicer.DifferentialShortestPath,
                    request_deserializer=rout3serv_pb2.DifferentialShortestPathRequest.FromString,
                    response_serializer=rout3serv_pb2.ArrowIPCChunk.SerializeToString,
            ),
            'GetDifferentialShortestPath': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDifferentialShortestPath,
                    request_deserializer=rout3serv_pb2.IdRef.FromString,
                    response_serializer=rout3serv_pb2.ArrowIPCChunk.SerializeToString,
            ),
            'GetDifferentialShortestPathRoutes': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDifferentialShortestPathRoutes,
                    request_deserializer=rout3serv_pb2.DifferentialShortestPathRoutesRequest.FromString,
                    response_serializer=rout3serv_pb2.DifferentialShortestPathRoutes.SerializeToString,
            ),
            'H3CellsWithinThreshold': grpc.unary_stream_rpc_method_handler(
                    servicer.H3CellsWithinThreshold,
                    request_deserializer=rout3serv_pb2.H3WithinThresholdRequest.FromString,
                    response_serializer=rout3serv_pb2.ArrowIPCChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rout3serv.Rout3Serv', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rout3Serv(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rout3serv.Rout3Serv/Version',
            rout3serv_pb2.Empty.SerializeToString,
            rout3serv_pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGraphs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rout3serv.Rout3Serv/ListGraphs',
            rout3serv_pb2.Empty.SerializeToString,
            rout3serv_pb2.ListGraphsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rout3serv.Rout3Serv/ListDatasets',
            rout3serv_pb2.Empty.SerializeToString,
            rout3serv_pb2.ListDatasetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def H3ShortestPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/H3ShortestPath',
            rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
            rout3serv_pb2.ArrowIPCChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def H3ShortestPathRoutes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/H3ShortestPathRoutes',
            rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
            rout3serv_pb2.RouteWKB.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def H3ShortestPathCells(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/H3ShortestPathCells',
            rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
            rout3serv_pb2.RouteH3Indexes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def H3ShortestPathEdges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/H3ShortestPathEdges',
            rout3serv_pb2.H3ShortestPathRequest.SerializeToString,
            rout3serv_pb2.RouteH3Indexes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DifferentialShortestPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/DifferentialShortestPath',
            rout3serv_pb2.DifferentialShortestPathRequest.SerializeToString,
            rout3serv_pb2.ArrowIPCChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDifferentialShortestPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/GetDifferentialShortestPath',
            rout3serv_pb2.IdRef.SerializeToString,
            rout3serv_pb2.ArrowIPCChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDifferentialShortestPathRoutes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/GetDifferentialShortestPathRoutes',
            rout3serv_pb2.DifferentialShortestPathRoutesRequest.SerializeToString,
            rout3serv_pb2.DifferentialShortestPathRoutes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def H3CellsWithinThreshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rout3serv.Rout3Serv/H3CellsWithinThreshold',
            rout3serv_pb2.H3WithinThresholdRequest.SerializeToString,
            rout3serv_pb2.ArrowIPCChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

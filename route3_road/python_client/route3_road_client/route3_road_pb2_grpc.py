# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import route3_road_pb2 as route3__road__pb2


class Route3RoadStub(object):
    """general methods -------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/route3.road.Route3Road/Version',
                request_serializer=route3__road__pb2.Empty.SerializeToString,
                response_deserializer=route3__road__pb2.VersionResponse.FromString,
                )
        self.GraphInfo = channel.unary_unary(
                '/route3.road.Route3Road/GraphInfo',
                request_serializer=route3__road__pb2.Empty.SerializeToString,
                response_deserializer=route3__road__pb2.GraphInfoResponse.FromString,
                )
        self.AnalyzeDisturbanceOfPopulationMovement = channel.unary_stream(
                '/route3.road.Route3Road/AnalyzeDisturbanceOfPopulationMovement',
                request_serializer=route3__road__pb2.DisturbanceOfPopulationMovementRequest.SerializeToString,
                response_deserializer=route3__road__pb2.ArrowRecordBatch.FromString,
                )
        self.GetDisturbanceOfPopulationMovement = channel.unary_stream(
                '/route3.road.Route3Road/GetDisturbanceOfPopulationMovement',
                request_serializer=route3__road__pb2.IdRef.SerializeToString,
                response_deserializer=route3__road__pb2.ArrowRecordBatch.FromString,
                )
        self.GetDisturbanceOfPopulationMovementRoutes = channel.unary_stream(
                '/route3.road.Route3Road/GetDisturbanceOfPopulationMovementRoutes',
                request_serializer=route3__road__pb2.DisturbanceOfPopulationMovementRoutesRequest.SerializeToString,
                response_deserializer=route3__road__pb2.DisturbanceOfPopulationMovementRoutes.FromString,
                )


class Route3RoadServicer(object):
    """general methods -------------------------------------
    """

    def Version(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GraphInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeDisturbanceOfPopulationMovement(self, request, context):
        """Population movement ---------------------------------

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDisturbanceOfPopulationMovement(self, request, context):
        """get an already computed analysis 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDisturbanceOfPopulationMovementRoutes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Route3RoadServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=route3__road__pb2.Empty.FromString,
                    response_serializer=route3__road__pb2.VersionResponse.SerializeToString,
            ),
            'GraphInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GraphInfo,
                    request_deserializer=route3__road__pb2.Empty.FromString,
                    response_serializer=route3__road__pb2.GraphInfoResponse.SerializeToString,
            ),
            'AnalyzeDisturbanceOfPopulationMovement': grpc.unary_stream_rpc_method_handler(
                    servicer.AnalyzeDisturbanceOfPopulationMovement,
                    request_deserializer=route3__road__pb2.DisturbanceOfPopulationMovementRequest.FromString,
                    response_serializer=route3__road__pb2.ArrowRecordBatch.SerializeToString,
            ),
            'GetDisturbanceOfPopulationMovement': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDisturbanceOfPopulationMovement,
                    request_deserializer=route3__road__pb2.IdRef.FromString,
                    response_serializer=route3__road__pb2.ArrowRecordBatch.SerializeToString,
            ),
            'GetDisturbanceOfPopulationMovementRoutes': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDisturbanceOfPopulationMovementRoutes,
                    request_deserializer=route3__road__pb2.DisturbanceOfPopulationMovementRoutesRequest.FromString,
                    response_serializer=route3__road__pb2.DisturbanceOfPopulationMovementRoutes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'route3.road.Route3Road', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Route3Road(object):
    """general methods -------------------------------------
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/route3.road.Route3Road/Version',
            route3__road__pb2.Empty.SerializeToString,
            route3__road__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GraphInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/route3.road.Route3Road/GraphInfo',
            route3__road__pb2.Empty.SerializeToString,
            route3__road__pb2.GraphInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzeDisturbanceOfPopulationMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/route3.road.Route3Road/AnalyzeDisturbanceOfPopulationMovement',
            route3__road__pb2.DisturbanceOfPopulationMovementRequest.SerializeToString,
            route3__road__pb2.ArrowRecordBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDisturbanceOfPopulationMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/route3.road.Route3Road/GetDisturbanceOfPopulationMovement',
            route3__road__pb2.IdRef.SerializeToString,
            route3__road__pb2.ArrowRecordBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDisturbanceOfPopulationMovementRoutes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/route3.road.Route3Road/GetDisturbanceOfPopulationMovementRoutes',
            route3__road__pb2.DisturbanceOfPopulationMovementRoutesRequest.SerializeToString,
            route3__road__pb2.DisturbanceOfPopulationMovementRoutes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

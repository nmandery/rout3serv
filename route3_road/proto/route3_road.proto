syntax = "proto3";

package route3.road;

message Empty {
}

message VersionResponse {
  string version = 1;
  string git_commit_sha = 2;
  string build_timestamp = 3;
}

/** A point in WGS84 coordinates */
message Point {
  double x = 1;
  double y = 2;
}

message DisturbanceOfPopulationMovementRequest {
  /** the geometry of the disturbance in WKB format

  WGS84 coordinate system
   */
  bytes disturbance_wkb_geometry = 1;

  /** The radius around the wkb_geometry to be analyzed.
      units are meters. */
  double radius_meters = 2;

  /** number of destinations which should be reached for one cell. after that routing for this cell will be stopped.
      0 -> continue until all are reached
   */
  uint32 num_destinations_to_reach = 3;

  /** targets to route to */
  repeated Point destinations = 4;

  /** Number of cells to be allowed to be missing between
   a cell and the graph while the cell is still counted as being connected
   to the graph */
  uint32 num_gap_cells_to_graph = 5;

  /** Setting a `downsampled_prerouting` will allow performing an initial routing at a lower resolution
  to reduce the number of routings to perform on the full-resolution graph. This has the potential
   to skew the results as a reduction in resolution may change the graph topology, but decreases the
   running time in most cases.
   */
  bool downsampled_prerouting = 6;

  /** store output on s3 */
  bool store_output = 7;

}

/** A reference to an ID string */
message IdRef {
  string id = 1;
}

enum CellInRoutePosition {
  Origin = 0;
  Destination = 1;
}

message DisturbanceOfPopulationMovementRoutesRequest {
  string dopm_id = 1;
  //CellInRoutePosition cell_position = 2;
  repeated uint64 cells = 3;
}

message RouteWKB {
  uint64 origin_cell = 1;
  uint64 destination_cell = 2;
  double cost = 3;
  bytes wkb = 4;
}

/** A single Arrow RecordBatch in Arrow IPC File format */
message ArrowRecordBatch {
  /** id of the object this batch belongs to - if there is any */
  string object_id = 1;

  bytes data = 2;
}

message DisturbanceOfPopulationMovementRoutes {
  repeated RouteWKB routes_without_disturbance = 2;
  repeated RouteWKB routes_with_disturbance = 3;
}

message GraphInfoResponse {
  uint32 h3_resolution = 1;
  uint64 num_edges = 2;
}

service Route3Road {
  // general methods -------------------------------------
  rpc Version(Empty) returns (VersionResponse) {}
  rpc GraphInfo(Empty) returns (GraphInfoResponse) {}


  // Population movement ---------------------------------
  rpc AnalyzeDisturbanceOfPopulationMovement(DisturbanceOfPopulationMovementRequest)
      returns (stream ArrowRecordBatch) {}

  /* get an already computed analysis */
  rpc GetDisturbanceOfPopulationMovement(IdRef)
      returns (stream ArrowRecordBatch) {}

  rpc GetDisturbanceOfPopulationMovementRoutes(DisturbanceOfPopulationMovementRoutesRequest)
      returns (stream DisturbanceOfPopulationMovementRoutes) {}
}
